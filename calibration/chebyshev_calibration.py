#%%
import numpy as np
import pandas as pd
import scipy.optimize as opt
import matplotlib.pyplot as plt

def func(x, a0, a1, a2, a3, a4):
    func = np.polynomial.chebyshev.chebval(x, [a0, a1, a2, a3, a4])
    return func

### Gives the parameters of chebyshev that gives best fit to the given data
#data_moments = np.array([38.12000874, 33.22762421, 25.3484224, 26.67954008, 24.41097278, 23.15059004, 22.46771332, 21.85495452, 21.46242013, 22.00364263, 21.57322063, 21.53371545, 21.29828515, 21.10144524, 20.8617942, 20.57282, 20.47473172, 20.31111347, 19.04137299, 18.92616951, 20.58517969, 20.48761429, 20.21744847, 19.9577682, 19.66931057, 19.6878927, 19.63107201, 19.63390543, 19.5901486, 19.58143606, 19.58005578, 19.59073213, 19.60190899, 19.60001831, 21.67763741, 21.70451784, 21.85430468, 21.97291208, 21.97017228, 22.25518398, 22.43969757, 23.21870602, 24.18334822, 24.97772026, 26.37663164, 29.65075992, 30.46944758, 31.51634777, 33.13353793, 32.89186997, 38.07083882, 39.2992811, 40.07987878, 35.19951571, 35.97943562, 37.05601334, 37.42979341, 37.91576867, 38.62775142, 39.4885405, 37.10609921, 40.03988031, 40.86564363, 41.73645892, 42.6208256, 43.37786072, 45.38166073, 46.22395387, 50.21419653, 51.05246704, 53.86896121, 53.90029708, 61.83586775, 64.87563699, 66.91207845, 68.07449767, 71.27919965, 73.57195873, 74.95045988, 76.6230815])
#np.polynomial.chebyshev.chebfit(ages, data_moments, 4)

 
#%%
# Chi_n Graph
# Parameter Guesses 
a0 = 1.5e+3 #.15807470e+03 
a1 = -1.05805189e+02  
a2 = 1.92411660e+00 
a3 = -1.53364020e-02
a4 = 4.51819445e-05

a0 = 1.15807470e+04 
a1 = -1.05805189e+02  
a2 = 1.92411660e+00 
a3 = -1.53364020e-02
a4 = 4.51819445e-05

a0 = 1.10807470e+03#5.19144310e+02
a1 = -1.05805189e+02#-4.70245283e+01
a2 = 1.92411660e+00#8.55162933e-01
a3 = -1.53364020e-02#-6.81617866e-03
a4 = 4.51819445e-05#

<<<<<<< HEAD
a0 = 5.10807470e+7
a1 = -1.05805189e+02#-4.70245283e+01
a2 = 1.92411660e+00#8.55162933e-01
a3 = -1.53364020e-02#-6.81617866e-03
a4 = 4.51819445e-05

a0 = 1.02161824e+08
a1 = -2.40512692e+02
a2 = 4.31447933e+00
a3 = -3.39544399e-02
a4 = 9.88631087e-05
    
a0 = 1.10807470e+03#5.19144310e+02
a1 = -1.05805189e+02#-4.70245283e+01
a2 = 1.92411660e+00#8.55162933e-01
a3 = -1.53364020e-02#-6.81617866e-03
a4 = 4.51819445e-05

=======
>>>>>>> e45bda2b32d217b3ef4ed14b3dd87cf484ab68d3
ages_beg = np.linspace(20, 65, 46)
data_beg = func(ages_beg, a0, a1,a2,a3,a4)
ages_end = np.linspace(65, 100, 36)
data_end = (data_beg[-1] - data_beg[-2]) * (ages_end - 65) + data_beg[-1]
data = np.linspace(20, 100, 81)
ages = np.linspace(20, 100, 81)
data[:46] = data_beg
data[45:] = data_end
plt.xlabel('Age $s$')
plt.ylabel(r'$\chi_n^s$')
plt.plot(ages, data, color = 'r', label = r'Estimated')
plt.grid(b=True, which='major', color='0.65', linestyle='-')
plt.tight_layout(rect=(0, 0.03, 1, 1))
plt.savefig("chi_n.png")


#%%
# Labor Data Moments
labor_hours = np.array([167, 165, 165, 165, 165, 166, 165, 165, 164, 166, 164])
labor_part_rate = np.array([0.69, 0.849, 0.849, 0.847, 0.847, 0.859, 0.859, 0.709, 0.709, 0.212, 0.212])
employ_rate = np.array([0.937, 0.954, 0.954, 0.966, 0.966, 0.97, 0.97, 0.968, 0.968, 0.978, 0.978])
labor_hours_adj = labor_hours * labor_part_rate * employ_rate
    # get fraction of time endowment worked (assume time
    # endowment is 24 hours minus required time to sleep 6.5 hours)
data_moments = labor_hours_adj * 12 / (365 * 17.5)

#%% 
# Labor Moments
model_moments = np.array([0.21092244724143888, 0.23663473960483364, 0.2512248460552426, 0.2554279329457508, 0.25988610741069157, 0.2674734351216116, 0.2756735811864669, 0.26881862807130374, 0.23334421444663225, 0.18809948673028212, 0.12602132474609165])
model_moments = np.array([0.20404221413001514, 0.23052275666998373, 0.24579210681260005, 0.25049168004035793, 0.25506539061621414, 0.26192771083017724, 0.26818932077312047, 0.2580381991790124, 0.21741600046836718, 0.16716230439659094, 0.1081621573647619])
model_moments = np.array([0.20404215275974136, 0.23052270482988457, 0.2457920652844417, 0.25049164655432304, 0.25506536207955, 0.2619276847270024, 0.26818929664663427, 0.2580381794552516, 0.21741598721398908, 0.1671622965224866, 0.10816216091568123])
model_moments = np.array([0.21981921031855878, 0.24505165244792193, 0.25851577603404347, 0.26159090431118637, 0.2650822314519963, 0.27165488540648103, 0.27932199881798064, 0.27297275407400984, 0.23834295323975926, 0.0364783683075553, 0.013424854505849902])
model_moments = np.array([0.3600000000000001, 0.36000000000000004, 0.36000000000000015, 0.3600000000000001, 0.36000000000000004, 0.3600000000000001, 0.36000000000000004, 0.3600000000000001, 0.36000000000000004, 0.36000000000000004, 0.36000000000000026])
model_moments = np.array([0.21790408013507778, 0.1918855797630126, 0.1441772660921646, 0.13204183960900598, 0.12889222083985807, 0.13574676514011122, 0.1383863867931649, 0.14427124330381907, 0.13311216763261371, 0.09718716233899116, 0.07687055910156787])
model_moments = np.array([0.18695764432072778, 0.20148701411133565, 0.20892485807981062, 0.20939382002543333, 0.21078687750898722, 0.21294210304359823, 0.21263567601901398, 0.20135807945865822, 0.16900594683190487, 0.1360897974544074, 0.08014015138492814])
model_moments = np.array([0.20014965214139024, 0.20037739137954097, 0.2051981722470077, 0.19972097610385017, 0.20330932983371885, 0.2085363374292446, 0.21422046454268376, 0.19091533836438096, 0.13935087020509773, 0.08670043730324063, 0.05315747197175494])
model_moments = np.array([0.21284342622979818, 0.26023729421773245, 0.2872583722876547, 0.28774372278162685, 0.28964146693360604, 0.3034267076680655, 0.3098928349172821, 0.2710813763236869, 0.19249415494636496, 0.02186926930142249, 0.006652315257643781])
model_moments = np.array([0.20606085282478112, 0.2546038596682728, 0.2787756602477865, 0.27874152822316606, 0.27415144125516316, 0.27912412233525485, 0.29008811179872696, 0.25590764504775415, 0.18020277952920696, 0.11691223989837018, 0.06005536385897268])
model_moments = np.array([0.20606085732493304, 0.2546038641112405, 0.27877566483423993, 0.27874153309132216, 0.27415144652416246, 0.279124128659523, 0.29008811892489456, 0.2559076515405608, 0.1802027837714529, 0.11691224243522139, 0.060055364702843575])
model_moments = np.array([0.20405518279806556, 0.25263542753011686, 0.2769057358997654, 0.27696186638564, 0.27235828825663694, 0.27723433296023986, 0.2881355403104722, 0.2541506884861141, 0.17890174019695923, 0.1163535313846822, 0.059785002598597606])
<<<<<<< HEAD
model_moments = np.array([0.2040540765626132, 0.2526354466647778, 0.2769057405403771, 0.27696186745847984, 0.27235828933517375, 0.27723433376871154, 0.2881355407467818, 0.2541506887816195, 0.1789017426314303, 0.11635354318881265, 0.059785018218161144])
=======
>>>>>>> e45bda2b32d217b3ef4ed14b3dd87cf484ab68d3
labels = np.linspace(20, 70, 11)
labels[-1] = 85

plt.xlabel(r'Age $s$')
plt.ylabel(r'Labor Supply $\frac{\bar{n_s}}{\tilde{l}}$')
plt.scatter(labels, data_moments, color = 'r', label = r'Data Moments')
plt.legend(loc='upper right')
plt.scatter(labels, model_moments, color = 'b', label = r'Model Moments')
plt.legend(loc='upper right')
plt.grid(b=True, which='major', color='0.65', linestyle='-')
plt.tight_layout(rect=(0, 0.03, 1, 1))
plt.savefig("labor_moments.png")



#%%
chi_n = [10569.85605544, 10556.69575201, 10545.49722284, 10536.06655896,
       10528.21934226, 10521.78064551, 10516.5850323 , 10512.47655711,
       10509.30876527, 10506.94469295, 10505.25686722, 10504.12730597,
       10503.44751795, 10503.1185028 , 10503.05075099, 10503.16424386,
       10503.38845359, 10503.66234326, 10503.93436676, 10504.16246887,
       10504.31408521, 10504.36614228, 10504.30505742, 10504.12673884,
       10503.83658559, 10503.4494876 , 10502.98982565, 10502.49147138,
       10501.99778727, 10501.5616267 , 10501.24533387, 10501.12074385,
       10501.26918257, 10501.78146682, 10502.75790426, 10504.30829338,
       10506.55192354, 10509.61757498, 10513.64351877, 10518.77751685,
       10525.17682201, 10533.00817793, 10542.4478191 , 10553.6814709 ,
       10566.90434957, 12066.90434957, 13566.90434957, 15066.90434957,
       16566.90434957, 18066.90434957, 19566.90434957, 21066.90434957,
       22566.90434957, 24066.90434957, 25566.90434957, 27066.90434957,
       28566.90434957, 30066.90434957, 31566.90434957, 33066.90434957,
       34566.90434957, 36066.90434957, 37566.90434957, 39066.90434957,
       40566.90434957, 42066.90434957, 43566.90434957, 45066.90434957,
       46566.90434957, 48066.90434957, 49566.90434957, 51066.90434957,
       52566.90434957, 54066.90434957, 55566.90434957, 57066.90434957,
       58566.90434957, 60066.90434957, 61566.90434957, 63066.90434957]

<<<<<<< HEAD
chi_n = [51079736.10905544, 51079722.94875201, 51079711.75022284,
       51079702.31955896, 51079694.47234226, 51079688.0336455 ,
       51079682.8380323 , 51079678.7295571 , 51079675.56176526,
       51079673.19769296, 51079671.50986722, 51079670.38030597,
       51079669.70051795, 51079669.3715028 , 51079669.30375099,
       51079669.41724386, 51079669.64145359, 51079669.91534326,
       51079670.18736675, 51079670.41546886, 51079670.56708521,
       51079670.61914228, 51079670.55805742, 51079670.37973883,
       51079670.08958559, 51079669.7024876 , 51079669.24282565,
       51079668.74447138, 51079668.25078727, 51079667.8146267 ,
       51079667.49833387, 51079667.37374385, 51079667.52218257,
       51079668.03446683, 51079669.01090426, 51079670.56129338,
       51079672.80492354, 51079675.87057498, 51079679.89651877,
       51079685.03051685, 51079691.42982202, 51079699.26117793,
       51079708.7008191 , 51079719.93447091, 51079733.15734957,
       51081233.15734957, 51082733.15734957, 51084233.15734957,
       51085733.15734957, 51087233.15734957, 51088733.15734957,
       51090233.15734957, 51091733.15734957, 51093233.15734957,
       51094733.15734957, 51096233.15734957, 51097733.15734957,
       51099233.15734957, 51100733.15734957, 51102233.15734957,
       51103733.15734957, 51105233.15734957, 51106733.15734957,
       51108233.15734957, 51109733.15734957, 51111233.15734957,
       51112733.15734957, 51114233.15734957, 51115733.15734957,
       51117233.15734957, 51118733.15734957, 51120233.15734957,
       51121733.15734957, 51123233.15734957, 51124733.15734957,
       51126233.15734957, 51127733.15734957, 51129233.15734957,
       51130733.15734957, 51132233.15734957]

chi_n = np.array(chi_n[:45])
data_moments = np.array([38.12000874, 33.22762421, 25.3484224, 26.67954008, 24.41097278, 23.15059004, 22.46771332, 21.85495452, 21.46242013, 22.00364263, 21.57322063, 21.53371545, 21.29828515, 21.10144524, 20.8617942, 20.57282, 20.47473172, 20.31111347, 19.04137299, 18.92616951, 20.58517969, 20.48761429, 20.21744847, 19.9577682, 19.66931057, 19.6878927, 19.63107201, 19.63390543, 19.5901486, 19.58143606, 19.58005578, 19.59073213, 19.60190899, 19.60001831, 21.67763741, 21.70451784, 21.85430468, 21.97291208, 21.97017228, 22.25518398, 22.43969757, 23.21870602, 24.18334822, 24.97772026, 26.37663164, 29.65075992, 30.46944758, 31.51634777, 33.13353793, 32.89186997, 38.07083882, 39.2992811, 40.07987878, 35.19951571, 35.97943562, 37.05601334, 37.42979341, 37.91576867, 38.62775142, 39.4885405, 37.10609921, 40.03988031, 40.86564363, 41.73645892, 42.6208256, 43.37786072, 45.38166073, 46.22395387, 50.21419653, 51.05246704, 53.86896121, 53.90029708, 61.83586775, 64.87563699, 66.91207845, 68.07449767, 71.27919965, 73.57195873, 74.95045988, 76.6230815])
ages = np.linspace(21, 65, 45)
print(len(chi_n))
print(len(ages))
print('params', np.polynomial.chebyshev.chebfit(ages, 2*chi_n, 4))



# import numpy as np
# ages = np.linspace(21,100,80)
# print('len1', len(ages))
# print('len2', len(chi_n))
# plt.scatter(ages, chi_n, color = 'b', label = r'Model Moments')
# plt.show
=======
import numpy as np
ages = np.linspace(21,100,80)
print('len1', len(ages))
print('len2', len(chi_n))
plt.scatter(ages, chi_n, color = 'b', label = r'Model Moments')
plt.show
>>>>>>> e45bda2b32d217b3ef4ed14b3dd87cf484ab68d3

