import numpy as np
import pytest
from ogusa import fiscal


def test_D_G_path():
    T = 320
    S = 80
    debt_ratio_ss = 1.2
    tG1 = 20
    tG2 = int(T * 0.8)
    ALPHA_T = np.ones(T) * 0.09
    ALPHA_G = np.ones(T) * 0.05
    rho_G = 0.1
    r_gov = np.ones(T + S) * 0.03
    g_n_vector = np.ones(T + S) * 0.02
    g_y = 0.03
    D0 = 0.59
    G0 = 0.05
    Y = np.append(np.array([1., 1.033, 1.067089, 1.10230294, 1.13867893,
                    1.17625534, 1.21507176, 1.25516913, 1.29658971,
                    1.33937718, 1.38357662, 1.42923465, 1.47639939,
                    1.52512057, 1.57544955, 1.62743939, 1.68114489,
                    1.73662267, 1.79393122, 1.85313095, 1.91428427,
                    1.97745565, 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,
                    2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,
                       2.  , 2.  , 2.  , 2.  , 2.   ,
                       2.  , 2.  , 2.  , 2.  , 2.   ,
                       2.  , 2.  , 2.  , 2.  , 2.   ,
                       2.  , 2.  , 2.  , 2.  , 2.   ,
                       2.  , 2.  , 2.  , 2.  , 2.   ,
                       2.  , 2.  , 2.  , 2.  , 2.   ,
                       2.  , 2.  , 2.  , 2.  , 2.   ,
                       2.  , 2.  , 2.  , 2.  , 2.   ,
                       2.  , 2.  , 2., 2., 2.,
                     2., 2., 2., 2., 2.,
                     2., 2., 2., 2., 2.,
                     2., 2., 2., 2., 2.,
                     2., 2., 2., 2., 2.,
                     2., 2., 2., 2., 2.,
                     2., 2., 2., 2., 2.,
                     2., 2., 2., 2., 2.,
                     2., 2., 2., 2., 2.,
                     2., 2., 2., 2., 2.,
                     2., 2., 2., 2., 2.,
                     2., 2., 2., 2., 2.,
                     2., 2., 2., 2., 2.,
                     2., 2., 2., 2., 2.,
                     2., 2., 2., 2., 2.,
                     2., 2., 2., 2., 2.,
                     2., 2., 2., 2., 2.,
                     2., 2., 2., 2., 2.,
                     2., 2., 2., 2., 2.,
                     2., 2., 2., 2., 2.,
                     2., 2., 2., 2., 2.,
                     2., 2., 2., 2., 2.,
                     2., 2., 2., 2., 2.,
                     2., 2., 2., 2., 2.,
                     2., 2., 2., 2., 2.,
                     2., 2., 2., 2., 2.,
                     2., 2., 2., 2., 2.,
                     2., 2., 2., 2., 2.,
                     2., 2., 2., 2., 2.,
                     2., 2., 2., 2., 2.,
                     2., 2., 2., 2., 2.,
                     2., 2., 2., 2., 2.,
                     2., 2., 2., 2., 2.,
                     2., 2., 2., 2., 2.,
                     2., 2., 2., 2., 2.,
                     2., 2., 2., 2., 2.,
                     2., 2., 2., 2., 2.,
                     2., 2., 2., 2., 2.,
                     2., 2., 2., 2., 2.,
                     2., 2., 2., 2., 2.,
                     2., 2., 2., 2., 2.,
                     2., 2., 2., 2., 2.,
                     2., 2., 2., 2., 2.,
                     2., 2., 2., 2., 2.,
                     2., 2., 2., 2., 2.,
                     2., 2., 2., 2., 2.,
                     2., 2., 2., 2., 2.]), np.ones(S) * 2.)
    T_H = np.append(np.array([0.09, 0.09297 , 0.09603801, 0.09920726, 0.1024811,
                     0.10586298, 0.10935646, 0.11296522, 0.11669307, 0.12054395,
                     0.1245219, 0.12863112, 0.13287595, 0.13726085, 0.14179046,
                     0.14646954, 0.15130304, 0.15629604, 0.16145381, 0.16678179,
                     0.17228558, 0.17797101, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18,
                     0.18, 0.18, 0.18, 0.18, 0.18]), np.ones(S) * 0.18)
    REVENUE = np.append(np.array([0.1, 0.1033  , 0.1067089, 0.11023029, 0.11386789,
                         0.11762553, 0.12150718, 0.12551691, 0.12965897, 0.13393772,
                         0.13835766, 0.14292347, 0.14763994, 0.15251206, 0.15754496,
                         0.16274394, 0.16811449, 0.17366227, 0.17939312, 0.18531309,
                         0.19142843, 0.19774556, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2,
                         0.2, 0.2, 0.2, 0.2, 0.2]), np.ones(S) * 0.2)

    D_expected = np.append(np.array([0.59, 0.61623291, 0.64319598, 0.67091602, 0.69942066,
                        0.72873841, 0.75889866, 0.78993172, 0.82186883, 0.85474225,
                        0.88858522, 0.92343206, 0.95931814, 0.99627999, 1.03435529,
                        1.07358289, 1.11400293, 1.15565679, 1.19858719, 1.24283823,
                        1.28845541, 2.29714112, 2.37294678, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4,
                        2.4, 2.4, 2.4, 2.4, 2.4]), np.ones(1) * 2.4)

    G_expected = np.array([0.05, 0.05165, 0.05335445, 0.05511515, 0.05693395,
                       0.05881277, 0.06075359, 0.06275846, 0.06482949,
                       0.06696886, 0.06917883, 0.07146173, 0.07381997, 0.07625603, 0.07877248,
                       0.08137197, 0.08405724, 0.08683113, 0.08969656, 0.09265655,
                       1.10647524, 0.14783724, 0.09841752, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527,
                       0.0705527, 0.0705527, 0.0705527, 0.0705527, 0.0705527])

    budget_balance = False
    baseline_spending = False
    other_dg_params = (T, r_gov, g_n_vector, g_y)
    dg_fixed_values = (Y, REVENUE, T_H, D0, G0)
    fiscal_params = (budget_balance, ALPHA_T, ALPHA_G, tG1, tG2, rho_G,
                     debt_ratio_ss)
    test_D, test_G = fiscal.D_G_path(dg_fixed_values, fiscal_params,
                                     other_dg_params, baseline_spending)
    print('Test D = ', test_D[:10])
    print('Expected D = ', D_expected[:10])
    print('TestD - Expected = ', np.absolute(test_D[:tG1] - D_expected[:tG1]).max())
    print('TestD - Expected = ', np.absolute(test_D[tG1:tG2] - D_expected[tG1:tG2]).max())
    print('TestD - Expected = ', np.absolute(test_D[tG2:] - D_expected[tG2:]).max())
    print('TestG - Expected = ', np.absolute(test_G[:tG1] - G_expected[:tG1]).max())
    print('TestG - Expected = ', np.absolute(test_G[tG1:tG2] - G_expected[tG1:tG2]).max())
    print('TestG - Expected = ', np.absolute(test_G[tG2:] - G_expected[tG2:]).max())
    # assert np.allclose(test_D, D_expected, rtol=1e-05, atol=1e-06)
    assert np.allclose(test_G, G_expected, rtol=1e-05, atol=1e-06)
